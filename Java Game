//Variables

//Control which screen is active by settings/updating
//gameScreen variable. We display the correct screen according
//to the value of this variable
//0:Initial screen
//1:Game Screen
//2:Game-over Screen

int gameScreen = 0;

//Setup Block

void setup() {
  size(500, 500);
}

//Draw Block

void draw() {
  //Display the contents of the current screen
  if(gameScreen == 0){
    initScreen();
  } else if(gameScreen == 1){
    gameScreen();
  } else if(gameScreen == 2){
    gameOverScreen();
  }
}

//Screen Contents

void initScreen() {
  background(o);
  textAlign(CENTER);
  text("Click to start", height/2, width/2);
  
}

void gameScreen() {
  background(255);
}

int ballX, ballY;
int ballSize = 20;
int ballColor = color(o);

void setup() {

ballX=width/4;
ballY=height/5;
}

void gameScreen() {
  drawBall();
}

void drawBall() {
  fill(ballColor);
  ellipse(ballX, ballY, ballSize, ballSize);
}

float gravity = 1;
float ballSpeedVert = 0;

void gameScreen() {
  applyGravity();
  keepInScreen();
}

void applyGravity() {
  ballSpeedVert +=gravity;
  ballY +=ballSpeedVert;
}

void makeBounceBottom(float surface) {
  ballY = surface-(ballSize/2);
ballSpeedVert*=-1;
}
void makeBounceBottom(float surface) {
  ballY = surface+(ballSize/2);
ballSpeedVert*=-1;
}

//keep ball in the screen
void keepInScreen() {
  //ball hits floor
  if(ballY+(ballSize/2) > height) {
    makeBounceBottom(height);
  }
  //ball hits ceiling
  if(ballY-(ballSize/2)<0) {
    makeBounceTop(0);
  }
}

float airfriction = 0.0001;
float friction = 0.1;

void applyGravity() {

  ballSpeedVert -= (ballSpeedVert * airfriction);
}
void makeBounceBottom(int surface) {

  ballSpeedVert -= (ballSpeedVert * friction);
}

void makeBounceTop(int surface) {

  ballSpeedVert -= (ballSpeedVert * friction);
}

color racketColor = color(0);
float racketWidth = 100;
float racketHeight = 10;

void gameScreen() {
  drawRacket();
}

void drawRacket() {
  fill(racketColor);
  rectMode(CENTER);
  rect(mouseX, mouseY, racketWidth, racketHeight);
}

int racketBounceRate = 20;
void gameScreen() {
  watchRacketBounce();
}

void watchRacketBounce() {
  float overhead = mouseY - pmouseY;
  if((ballX+(ballSize/2) > mouseX-(racketWidth/2))&&(ballX-(ballSize/2) < mouseX+(racketWidth/2))) {
    if(dist(ballX, ballY, ballX, mouseY) <= (ballSize/2)+abs(overhead)) {
      makeBounceBottom(mouseY);
      //racket moving up
      if(overhead<0) {
        ballY+=overhead;
        ballSpeedVert+=overhead;
      }
    }
  }
}

float ballSpeedHorizon = 10;

void gameScreen() {
  applyHorizontalSpeed();
}

void applyHorizontalSpeed() {
  ballX += ballSpeedHorizon;
  ballSpeedHorizon -= (ballSpeedHorizon * airfriction);
}
void makeBounceLeft(float surface) {
  ballX = surface+(ballSize/2);
ballSpeedHorizon*=-1;
ballSpeedHorizon -= (ballSpeedHorizon * friction);
}

void makeBounceRight(float surface) {
  ballX = surface-(ballSize/2);
  ballSpeedHorizon*=-1;
  ballSpeedHorizon -= (ballSpeedHorizon * friction);
}
void keepInScreen() {
  if(ballX-(ballSize/2) < 0) {
    makeBounceLeft(0);
  }
  if(ballX+(ballSize/2) > width) {
    makeBounceRight(width);
  }
}
void watchRacketBounce() {

  if((ballX+(ballSize/2) > mouseX-(racketWidth/2))&&(ballX-(ballSize/2) < mouseX+(racketWidth/2))) {
    if(dist(ballX, ballY, ballX, amouseY) <= (ballSize/2)+abs(overhead)) {
      ballSpeedHorizon = (ballX - mouseX)/5;
    }
  }
}

int wallSpeed = 5;
int wallInterval = 1000;
float lastAddTime = 0;
int minGapHeight = 200;
int maxGapHeight = 300;
int wallWidth = 80;
color wallColors = color(0);
//This arraylist stores data of the gaps between the walls
ArrayList<int[]> walls = new ArrayList<int[]>();

void gameScreen() {
  wallAdder();
  wallHandler();
}

void wallAdder() {
  if(millis()-lastAddTiem > wallInterval) {
    int randHeight = round(random(minGapHeight, maxGapHeight));
    int randY = round(random(o, height-randHeight));
    int[] randWall = {width, randY, wallWidth, randHeight};
    walls.add(randWall);
    lastAddTime = millis();
  }
}

void wallHandler() {
  for (int i = 0; i < walls.size(); i++){
    wallRemover(i);
    wallMover(i);
    wallDrawer(i);
  }
}

void wallDrawer(int index) {
  int[] wall = walls.get(index);
int gapWallX = wall[0];
int gapWallY = wall[1];
int gapWallWidth = wall[2];
int gapWallHeight = wall[3];
rectMode(CORNER);
fill(wallColors);
rect(gapWallX, o, gapWallWidth, gapWallY);
rect(gapWallX, gapWallY+gapWallHeight, gapWallWidth, height-(gapWallY+gapWallHeight));
}

void wallMover(int index) {
  int[] wall = walls.get(index);
  wall[0] -= wallSpeed;
}
void wallRemover)int index) {
  int[] wall = walls.get(index);
  if(wall[0]+wall[2] <= 0) {
    walls.remove(index);
  }
}

void wallHandler() {
  for(int i=0; i<walls.size(); i++) {
    watchWallCollision(i);
  }
}

void watchWallCollision(int index) {
  int[] wall = walls.get(index);
int gapWallX = wall[0];
int gapWallY = wall[1];
int gapWallWidth = wall[2];
int gappWallHeight = wall[3];
int wallTopX = gapWallX;
int wallTopY = 0;
int wallTopWidth = gapWallWidth;
int wallTopHeight = gapWallY;
int wallBottomX = gapWallX;
int wallBottomY = gapWally+gapWallHeight;
int wallBottomWidth = gapWallWidth;
int wallBottomHeight = height-(gapWallY+gapWallHeight);

if(
  (ballX+(ballSize/2)>wallTopX) &&
  (ballX-(ballSize/2)<wallTopX+wallTopWidth)&&
  (ballY+(ballSize/2)>wallTopY)&&
  (ballY-(ballSize/2)<wallTopY+wallTopHeight)
){
  //collides with uper wall
}

if(
  (ballX+(ballSize/2)>wallBottomX)&&
  int maxHealth = 100;
  float health = 100;
float healthDecrease = 1;
int healthBarWidth = 60;
  void gameScreen(){
    drawHealthBar();
  }

void drawHealthBar() {
  noStroke();
  fill(236,240,241);
  rectMode(CORNER);
  rect(ballX-(healthBarWidth/2),ballY - 30, healthBarWidth, 5);
  if(health > 60) {
    fill(46,204,113);
  } else if (health > 30) {
    fill(230,126,34);
  }else {
    fill(231,76,60);
  }
rectMode(CORNER);
  rect(BallX-(healthBarWidth/2),BallY-30, healthBarWidth*(health/maxHealth),5);
}

  void decreaseHealth(){
    health -= healthDecrease;
    if(health <= 0){
      gameOver();
    }
  }

void gameOverScreen() {
  background(0);
  textAlign(CENTER);
  fill(255);
  textSize(30);
  text("Game Over", height/2, width/2 - 20);
  textSize(15);
  text("Click to Restart", height/2, width/2 + 10);
}

void wallAdder() {
  if(millis()-lastAddTime > wallInterval) {
    int[] randWall = {width, randY, wallWidth, randHeight, 0};
  }
}

void watchWallCollision(int index) {
  int wallScored = wall[4];
if(ballX > gapWallX+(gapWallWidth/2)&&wallScored==0){
  wallScored = 1;
  wall[4] = 1;
  score();
 }
}
void score() {
  score++;
}
void printScore() {
  textAlign(CENTER);
  fill(0);
  textSize(30);
  text(score, height/2, 50);
}

public void mousePressed() {
  if(gameScreen==2) {
    restart();
  }
}

void restart() {
  score = 0;
  health = maxHealth;
  ballX=width/4;
  ballY=height/5;
  lastAddTime = 0;
  walls.clear();
  gameScreen = 0;
}





